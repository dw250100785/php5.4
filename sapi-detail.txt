SAPI是服务器抽象层API
在各个服务器抽象层之间遵守着相同的约定，这里我们称之为SAPI接口。
+-----------------------------------+
|            上层调用               |
+-----------------------------------+
                |
                |
                +
+-----------------------------------+
|              SAPI层               |
+-----------------------------------+
                |
                |
                +
+-----------------------------------+
|    Apache CGI CLI Embed ....      |
+-----------------------------------+

每个SAPI实现都是一个_sapi_module_struct结构体变量(SAPI接口)。

sapi/webjames/webjames.c:               sapi_module.startup(&sapi_module);
sapi/apache2handler/sapi_apache2.c:     apache2_sapi_module.startup(&apache2_sapi_module);
sapi/thttpd/thttpd.c:                   thttpd_sapi_module.startup(&thttpd_sapi_module);
sapi/isapi/php5isapi.c:                 isapi_sapi_module.startup(&sapi_module);
sapi/fpm/fpm/fpm_main.c:                cgi_sapi_module.startup(&cgi_sapi_module);
sapi/milter/php_milter.c:               sapi_module.startup(&milter_sapi_module);
sapi/tux/php_tux.c:                     tux_sapi_module.startup(&tux_sapi_module);
sapi/nsapi/nsapi.c:                     nsapi_sapi_module.startup(&nsapi_sapi_module);
sapi/phttpd/phttpd.c:                   phttpd_sapi_module.startup(&phttpd_sapi_module);
sapi/caudium/caudium.c:                 sapi_module.startup(&caudium_sapi_module);
sapi/cgi/cgi_main.c:                    cgi_sapi_module.startup(&cgi_sapi_module)
sapi/continuity/capi.c:                 capi_sapi_module.startup(&capi_sapi_module);
sapi/pi3web/pi3web_sapi.c:              pi3web_sapi_module.startup(&pi3web_sapi_module);
sapi/apache2filter/sapi_apache2.c:      apache2_sapi_module.startup(&apache2_sapi_module);
sapi/aolserver/aolserver.c:             sapi_module.startup(&aolserver_sapi_module);
每种服务器的sapi启动方式都是类似的，都通过SAPI统一接口来启动, xxxx.startup(xxxx);

下面先看看_sapi_module_struct结构体：
struct _sapi_module_struct {
    char *name;                                                          // 简单名称
    char *pretty_name;                                                   // 详细名称
    int (*startup)(struct _sapi_module_struct *sapi_module);             // 启动方法 函数指针
    int (*shutdown)(struct _sapi_module_struct *sapi_module);            // 关闭方法 函数指针
    int (*activate)(TSRMLS_D);                                           // 激活方法
    int (*deactivate)(TSRMLS_D);                                         // 关闭方法
    int (*ub_write)(const char *str, unsigned int str_length TSRMLS_DC); // 
    void (*flush)(void *server_context);                                 // 刷新方法
    struct stat *(*get_stat)(TSRMLS_D);                                  // 获取状态方法
    char *(*getenv)(char *name, size_t name_len TSRMLS_DC);              // 获取环境变量方法
    void (*sapi_error)(int type, const char *error_msg, ...);            // sapi错误处理方法

    int (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);   // header处理器
    int (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);    // 发送大量headers方法
    void (*send_header)(sapi_header_struct *sapi_header, void *server_context TSRMLS_DC);    // 发送单个header方法

    int (*read_post)(char *buffer, uint count_bytes TSRMLS_DC);          // 读取post方法
    char *(*read_cookies)(TSRMLS_D);                                     // 读取cookie方法

    void (*register_server_variables)(zval *track_vars_array TSRMLS_DC); // 注册服务器变量方法
    void (*log_message)(char *message TSRMLS_DC);                        // 记录日志信息方法
    double (*get_request_time)(TSRMLS_D);                                // 获取请求时间方法
    void (*terminate_process)(TSRMLS_D);                                 // 终止进程方法

    char *php_ini_path_override;                                         // php.ini覆盖路径

    void (*block_interruptions)(void);                                   // 阻止中断方法
    void (*unblock_interruptions)(void);                                 // 疏通中断方法

    void (*default_post_reader)(TSRMLS_D);                               // 默认post读取方法
    void (*treat_data)(int arg, char *str, zval *destArray TSRMLS_DC);   // 处理数据方法
    char *executable_location;                                           // 可执行路径

    int php_ini_ignore;                                                  // php.ini是否忽略
    int php_ini_ignore_cwd; /* don't look for php.ini in the current directory */  // 当前指令忽略php.ini

    int (*get_fd)(int *fd TSRMLS_DC);                                    // 获取文件描述符

    int (*force_http_10)(TSRMLS_D);                                      // 

    int (*get_target_uid)(uid_t * TSRMLS_DC);                            // 获取目标对象的用户ID
    int (*get_target_gid)(gid_t * TSRMLS_DC);                            // 获取目标对象的用户组ID

    unsigned int (*input_filter)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC);  // 输入过滤器
    
    void (*ini_defaults)(HashTable *configuration_hash);                 // ini默认值设置方法
    int phpinfo_as_text;                                                 // phpinfo是否作为文本

    char *ini_entries;                                                   // ini实体数组
    const zend_function_entry *additional_functions;                     // 附加函数变量
    unsigned int (*input_filter_init)(TSRMLS_D);                         // 输入过滤器初始化方法
};